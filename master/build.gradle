import groovy.io.FileType
import groovy.sql.Sql

configurations {
    jaxws
}

dependencies {
    jaxws "com.sun.xml.ws:jaxws-tools:2.1.4"
}

// プラグイン読み込み
apply plugin: "java"

allprojects {
    // 初期化処理
    buildscript {
        repositories {
            jcenter()
        }
        dependencies {
            classpath "mysql:mysql-connector-java:5.1.29"
            classpath "org.apache.derby:derbyclient:10.12.1.1"
            classpath "org.apache.activemq:activemq-all:5.12.0"
        }
    }
    // リポジトリ設定
    repositories {
        jcenter()
    }
}

subprojects {
    // プラグイン読み込み
    apply plugin: "war"
    apply plugin: "eclipse"
    apply plugin: "jacoco"
    apply plugin: "findbugs"

    // 文字コード設定
    def defaultEncoding = "UTF-8"
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

    // Java EE7依存関係設定
    dependencies {
        providedCompile "javax:javaee-api:7.0"
        providedCompile "jstl:jstl:1.2"
        compile "junit:junit:4.12"
        testCompile "junit:junit:4.12"
    }

    // Javaプラグイン設定
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // ソースフォルダの設定
    sourceSets {
        main {
            java {
                srcDir "src/main/java"
                srcDir "src/main/webapp"
            }
            resources {
                srcDir "src/main/resources"
            }
        }
        test {
            java {
                srcDir "src/test/java"
            }
            resources {
                srcDir "src/test/resources"
            }
        }
    }

    // Eclipseプラグイン設定
    eclipse {
        classpath {
            defaultOutputDir = file("classes")
        }
    }

    // デプロイする（GlassFish）
    task deployGlassFish(dependsOn: [clean, war]) << {
        deploy(war.getArchivePath().path)
    }

    // アンデプロイする（GlassFish）
    task undeployGlassFish << {
        undeploy(war.archiveName.replaceAll(/\.war/, ""))
    }

    // 初期データをセットアップする（MySQL）
    task setupMySQL << {
        execSqlDir("$projectDir/sql/mysql", conf.mysql.general.url,
                conf.mysql.general.user, conf.mysql.general.password,
                conf.mysql.driverClass)
    }

    // 初期データをセットアップする（Derby）
    task setupDerby << {
        execSqlDir("$projectDir/sql/derby", conf.derby.general.url,
                conf.derby.general.user, conf.derby.general.password,
                conf.derby.driverClass)
    }

    // タスクをグループ化する
    [deployGlassFish, undeployGlassFish]*.group = "deploy"
    [setupMySQL, setupDerby]*.group = "setup-init-data"
}

// 設定情報の読み込み
def conf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/ap-archi-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/ap-archi-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.conf = conf

// GlassFishを起動する
task startGlassFish << {
    exec {
        executable conf.glassfish.asadmin
        args "start-domain", conf.glassfish.domainName
    }
}

// GlassFishを停止する
task stopGlassFish << {
    exec {
        executable conf.glassfish.asadmin
        args "stop-domain", conf.glassfish.domainName
    }
}

// データソースを作成するメソッド
def createDataSource(datasourceClassName, property, connPoolName,
        datasourceJndiName) {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "create-jdbc-connection-pool"
        args "--datasourceclassname", datasourceClassName
        args "--restype", "javax.sql.DataSource"
        args "--property", property
        args connPoolName
    }
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "create-jdbc-resource"
        args "--connectionpoolid", connPoolName
        args "--enabled=true"
        args datasourceJndiName
    }
}

// データソースを削除するメソッド
def deleteDataSource(connPoolName, datasourceJndiName) {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "delete-jdbc-resource"
        args datasourceJndiName
    }
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "delete-jdbc-connection-pool"
        args "--cascade"
        args connPoolName
    }
}

// MySQL用データソースを作成する
task createMySQLDS << {
    createDataSource(conf.mysql.datasourceClass,
            "portNumber=${conf.mysql.port}:" +
            "serverName=${conf.mysql.hostName}:" +
            "User=${conf.mysql.general.user}:" +
            "Password=${conf.mysql.general.password}:" +
            "databaseName=${conf.mysql.general.db}",
            conf.mysql.general.connPoolName,
            conf.mysql.general.datasourceJndiName)
}

// MySQL用データソースを削除する
task deleteMySQLDS << {
    deleteDataSource(conf.mysql.general.connPoolName,
            conf.mysql.general.datasourceJndiName)
}

// MySQL用データソースを作成する
task createMySQLSalesDS << {
    createDataSource(conf.mysql.datasourceClass,
            "portNumber=${conf.mysql.port}:" +
            "serverName=${conf.mysql.hostName}:" +
            "User=${conf.mysql.sales.user}:" +
            "Password=${conf.mysql.sales.password}:" +
            "databaseName=${conf.mysql.sales.db}",
            conf.mysql.sales.connPoolName,
            conf.mysql.sales.datasourceJndiName)
}

// MySQL用データソースを削除する
task deleteMySQLSalesDS << {
    deleteDataSource(conf.mysql.sales.connPoolName,
            conf.mysql.sales.datasourceJndiName)
}

// Derbyを起動する
task startDerby << {
    exec {
        executable conf.glassfish.asadmin
        args "start-database"
        args "--dbhost=${conf.derby.hostName}"
        args "--dbhome=${conf.derby.homeDir}"
        args "--dbport=${conf.derby.port}"
    }
}

// Derbyを停止する
task stopDerby << {
    exec {
        executable conf.glassfish.asadmin
        args "stop-database"
        args "--dbhost=${conf.derby.hostName}"
        args "--dbport=${conf.derby.port}"
    }
}

// Derby用データソースを作成する
task createDerbyDS << {
    createDataSource(conf.derby.datasourceClass,
            "portNumber=${conf.derby.port}:" +
            "serverName=${conf.derby.hostName}:" +
            "User=${conf.derby.general.user}:" +
            "Password=${conf.derby.general.password}:" +
            "databaseName=${conf.derby.general.db}",
            conf.derby.general.connPoolName,
            conf.derby.general.datasourceJndiName)
}

// Derby用データソースを削除する
task deleteDerbyDS << {
    deleteDataSource(conf.derby.general.connPoolName,
            conf.derby.general.datasourceJndiName)
}

// デプロイメソッド（GlassFish）
def deploy(warFile) {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "deploy"
        args "--force", true
        args warFile
    }
}

// アンデプロイメソッド（GlassFish）
def undeploy(warName) {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "undeploy"
        args warName
    }
}

// SQLを発行するメソッド（ディレクトリ指定）
def execSqlDir(dir, url, user, password, driverClass) {
    new File(dir).listFiles().sort{a, b -> a.name <=> b.name}.each{ File f ->
        ant.sql(url: url,
            userid: user,
            password: password,
            driver: driverClass,
            classpath: buildscript.configurations.classpath.asPath,
            encoding: "UTF-8",
            onerror: "continue") {
                fileset(file: f)
            }
    }
}

// SQLを発行するメソッド（ファイル指定）
def execSql(file, url, user, password, driverClass) {
    ant.sql(
        driver: driverClass,
        url: url,
        userid: user,
        password: password,
        classpath: buildscript.configurations.classpath.asPath,
        encoding: "UTF-8",
        onerror: "continue") {
            fileset(file: file)
        }
}

// MySQLを初期化する
task initMySQL << {
    execSql("$projectDir/sql/mysql/DROP_MYSQL_USER.sql",
            conf.mysql.general.baseUrl, "root", conf.mysql.rootPassword,
            conf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/DROP_MYSQL_DATABASE.sql",
            conf.mysql.general.baseUrl, "root", conf.mysql.rootPassword,
            conf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/CREATE_MYSQL_USER.sql",
            conf.mysql.general.baseUrl, "root", conf.mysql.rootPassword,
            conf.mysql.driverClass)
    execSql("$projectDir/sql/mysql/CREATE_MYSQL_DATABASE.sql",
            conf.mysql.general.baseUrl, "root", conf.mysql.rootPassword,
            conf.mysql.driverClass)
}

// MySQLのJDBCドライバをコピーする
task copyMySQLJDBCDriver << {
    copy {
        from conf.mysql.driverDir + "/" + conf.mysql.driverJar
        into conf.glassfish.glassfishDir + "/domains/" +
             conf.glassfish.domainName + "/lib/ext"
    }
}

// DerbyのJDBCドライバをコピーする
task copyDerbyJDBCDriver << {
    copy {
        from conf.derby.driverDir + "/" + conf.derby.driverJar
        into conf.glassfish.glassfishDir + "/domains/" +
             conf.glassfish.domainName + "/lib/ext"
    }
}

// Classpathファイル（マスター）を各プロジェクトに配布する
task copyClasspathFile << {
    subprojects.project.projectDir.each { File dir ->
        copy {
            from "master.classpath"
            into dir.getPath()
            rename { String fileName ->
                fileName.replace("master.classpath", ".classpath")
            }
        }
    }
}

// ManagedExecutorServiceを作成する
task createManagedExecutorService << {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "create-managed-executor-service"
        args "concurrent/MyExecutorService"
    }
}

// ManagedExecutorServiceを削除する
task deleteManagedExecutorService << {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "delete-managed-executor-service"
        args "concurrent/MyExecutorService"
    }
}

// ActiveMQを起動する
task startActiveMQ << {
    exec {
        executable conf.activemq.startCommand
    }
}

// 永続化設定ファイルをセットアップする（MySQL）
def setUpJpaWithMySQL(projectDir, provider) {
    new File(projectDir + "/src/main/resources/META-INF/persistence.xml")
        .withWriter { writer ->
            new File(projectDir + "/config/jpa/" + provider + "/persistence.xml")
                .newReader().eachLine { line ->
                    line = line.replaceAll("#DRIVER#", conf.mysql.driverClass)
                    line = line.replaceAll("#URL#", conf.mysql.general.url)
                    line = line.replaceAll("#USER#", conf.mysql.general.user)
                    line = line.replaceAll("#PASSWORD#", conf.mysql.general.password)
                    line = line.replaceAll("#RDB#", "MySQL")
                    line = line.replaceAll("#DIALECT#", "org.hibernate.dialect.MySQLDialect")
                    writer.println(line)
                }
        }
}

// 永続化設定ファイルをセットアップする（Derby）
def setUpJpaWithDerby(projectDir, provider) {
    new File(projectDir + "/src/main/resources/META-INF/persistence.xml")
        .withWriter { writer ->
            new File(projectDir + "/config/jpa/" + provider + "/persistence.xml")
                .newReader().eachLine { line ->
                    line = line.replaceAll("#DRIVER#", conf.derby.driverClass)
                    line = line.replaceAll("#URL#", conf.derby.general.url)
                    line = line.replaceAll("#USER#", conf.derby.general.user)
                    line = line.replaceAll("#PASSWORD#", conf.derby.general.password)
                    line = line.replaceAll("#RDB#", "Derby")
                    line = line.replaceAll("#DIALECT#", "org.hibernate.dialect.DerbyDialect")
                    writer.println(line)
                }
        }
}

// MyBatis設定ファイルをセットアップする（MySQL）
def setUpMyBatisWithMySQL(projectDir) {
    new File(projectDir + "/src/main/resources/mybatis-config.xml")
        .withWriter { writer ->
            new File(projectDir + "/config/mybatis/mybatis-config.xml")
                .newReader().eachLine { line ->
                    line = line.replaceAll("#DRIVER#", conf.mysql.driverClass)
                    line = line.replaceAll("#URL#", conf.mysql.general.url)
                    line = line.replaceAll("#USER#", conf.mysql.general.user)
                    line = line.replaceAll("#PASSWORD#", conf.mysql.general.password)
                    writer.println(line)
                }
        }
}

// MyBatis設定ファイルをセットアップする（Derby）
def setUpMyBatisWithDerby(projectDir) {
    new File(projectDir + "/src/main/resources/mybatis-config.xml")
        .withWriter { writer ->
            new File(projectDir + "/config/mybatis/mybatis-config.xml")
                .newReader().eachLine { line ->
                    line = line.replaceAll("#DRIVER#", conf.derby.driverClass)
                    line = line.replaceAll("#URL#", conf.derby.general.url)
                    line = line.replaceAll("#USER#", conf.derby.general.user)
                    line = line.replaceAll("#PASSWORD#", conf.derby.general.password)
                    writer.println(line)
                }
        }
}

// Spring JDBC設定ファイルをセットアップする（MySQL）
def setUpSpringWithMySQL(projectDir) {
    new File(projectDir + "/config/spring").eachFileRecurse(
            FileType.FILES) { file ->
        new File(projectDir + "/src/main/resources/" + file.name).withWriter { writer ->
            file.eachLine { line ->
                line = line.replaceAll("#DRIVER#", conf.mysql.driverClass)
                line = line.replaceAll("#URL#", conf.mysql.general.url)
                line = line.replaceAll("#USER#", conf.mysql.general.user)
                line = line.replaceAll("#PASSWORD#", conf.mysql.general.password)
                line = line.replaceAll("#RDB#", "MYSQL") // 全部大文字なので注意
                line = line.replaceAll("#DIALECT#", "org.hibernate.dialect.MySQLDialect")
                writer.println(line)
            }
        }
    }
}

// Spring JDBC設定ファイルをセットアップする（Derby）
def setUpSpringWithDerby(projectDir) {
    new File(projectDir + "/config/spring").eachFileRecurse(
            FileType.FILES) { file ->
        new File(projectDir + "/src/main/resources/" + file.name).withWriter { writer ->
            file.eachLine { line ->
                line = line.replaceAll("#DRIVER#", conf.derby.driverClass)
                line = line.replaceAll("#URL#", conf.derby.general.url)
                line = line.replaceAll("#USER#", conf.derby.general.user)
                line = line.replaceAll("#PASSWORD#", conf.derby.general.password)
                line = line.replaceAll("#RDB#", "DERBY") // 全部大文字なので注意
                line = line.replaceAll("#DIALECT#", "org.hibernate.dialect.DerbyDialect")
                writer.println(line)
            }
        }
    }
}

// WSGEN
def wsgen(serviceClass, classesDir, srcDir, wsdlDir) {
    exec {
        executable conf.wsgen
        args "-cp", classesDir
        args "-d", classesDir
        args "-s", srcDir
        args "-r", wsdlDir
        args "-keep"
        args "-wsdl"
        args serviceClass
    }
}

// WSDLファイルにエンドポイントを埋め込む
def replaceWsdl(wsdlFile, warName, serviceName) {
    File tmpFile = new File(wsdlFile.getParent() + "/tmp.wsdl")
    tmpFile.withWriter { writer ->
        wsdlFile.newReader().eachLine { line ->
            line = line.replaceAll("REPLACE_WITH_ACTUAL_URL",
            "http://" + conf.glassfish.hostName + ":" +
            conf.glassfish.httpPort + "/" +
            warName.replaceAll(/\.war/, "") + "/" + serviceName)
            writer.println(line)
        }
    }
    wsdlFile.delete()
    tmpFile.renameTo(wsdlFile.path)
}

// WSIMPORT
def wsimport(wsdlFile, proxyDir) {
    exec {
        executable conf.wsimport
        args "-d", proxyDir
        args "-keep"
        args wsdlFile
    }
}

// タスクをグループ化する
[startGlassFish, stopGlassFish]*.group = "glassfish"
[initMySQL, copyMySQLJDBCDriver]*.group = "mysql"
[createMySQLDS, deleteMySQLDS, createMySQLSalesDS, deleteMySQLSalesDS]*.group = "mysql-datasource"
[startDerby, stopDerby, copyDerbyJDBCDriver]*.group = "derby"
[createDerbyDS, deleteDerbyDS]*.group = "derby-datasource"
[createManagedExecutorService, deleteManagedExecutorService]*.group = "managed-executor-service"
[startActiveMQ]*.group = "activemq"
