// 設定情報の読み込み
def conf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def files = files(
            "${System.properties["user.home"]}/ap-archi-conf.gradle")
    files.inject(new ConfigObject()) { conf, file ->
        file.exists() ? conf.merge(slurper.parse(file.toURL())) : conf
    }
}()

def param = "aaaa"
def warFile

task printTask << {
    println param
    println "rootDir ---> $rootDir" // 組み込み変数
    println "projectDir ---> $projectDir" // 組み込み変数
    println glassfishDir
    println conf.glassfish.adminPasswordFile
    println conf.glassfish.moduleDir
    println conf.derby.url
}

task startGlassFish << {
    exec {
        executable conf.glassfish.asadmin
        args "start-domain", conf.glassfish.domainName
        args "--passwordfile", conf.glassfish.adminPasswordFile
    }
}

task stopGlassFish << {
    exec {
        executable conf.glassfish.asadmin
        args "stop-domain", conf.glassfish.domainName
    }
}

task createDataSource << {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--passwordfile", conf.glassfish.adminPasswordFile
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "create-jdbc-connection-pool"
        args "--datasourceclassname", conf.derby.datasource
        args "--restype", "javax.sql.DataSource"
        args "--property", "portNumber=${conf.derby.port}:serverName=${conf.glassfish.hostName}:User=TESTUSER:Password=PASSWORD:databaseName=testdb"
        args conf.glassfish.connPoolName
    }
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--passwordfile", conf.glassfish.adminPasswordFile
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "create-jdbc-resource"
        args "--connectionpoolid", conf.glassfish.connPoolName
        args "--enabled=true"
        args conf.glassfish.datasourceJndiName
    }
}

task deleteDataSource << {
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--passwordfile", conf.glassfish.adminPasswordFile
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "delete-jdbc-resource"
        args conf.glassfish.datasourceJndiName
    }
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--passwordfile", conf.glassfish.adminPasswordFile
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "delete-jdbc-connection-pool"
        args "--cascade"
        args conf.glassfish.connPoolName
    }
}

task startDerby << {
    exec {
        executable conf.glassfish.asadmin
        args "start-database"
        args "--dbhost=${conf.derby.hostName}"
        args "--dbhome=${conf.derby.homeDir}"
        args "--dbport=${conf.derby.port}"
    }
}

task stopDerby << {
    exec {
        executable conf.glassfish.asadmin
        args "stop-database"
        args "--dbhost=${conf.derby.hostName}"
        args "--dbport=${conf.derby.port}"
    }
}

task deployGlassFish << {
    print warFile + "#####"
    exec {
        executable conf.glassfish.asadmin
        args "--user", conf.glassfish.adminUsername
        args "--host", conf.glassfish.hostName
        args "--port", conf.glassfish.adminPort
        args "deploy"
        args "--force", true
        args warFile
    }
}

// タスクをグループ化する
[startGlassFish, stopGlassFish, createDataSource, deleteDataSource]*.group = "glassfish"
[startDerby, stopDerby]*.group = "derby"
