import groovy.io.FileType
import groovy.sql.Sql

wrapper {
    gradleVersion = "6.2"
}

configurations {
    jaxws
}

dependencies {
    jaxws "com.sun.xml.ws:jaxws-tools:2.1.4"
}

// プラグイン読み込み
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "jacoco"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "mysql:mysql-connector-java:5.1.47"
    }
}

// リポジトリ設定
repositories {
    jcenter()
}

// 文字コード設定
def defaultEncoding = "UTF-8"
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

// 依存関係設定
dependencies {
    runtime "mysql:mysql-connector-java:5.1.47"
}

// Javaプラグイン設定
sourceCompatibility = 1.8
targetCompatibility = 1.8

// ソースフォルダの設定
sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
    test {
        java {
            srcDir "src/test/java"
        }
        resources {
            srcDir "src/test/resources"
        }
    }
}

// Eclipseプラグイン設定
eclipse {
    classpath {
        defaultOutputDir = file("bin")
    }
}

// 初期データをセットアップする
task setupMySQL doLast {
    execSqlDir("$projectDir/sql/mysql", conf.mysql.general.url,
            conf.mysql.general.user, conf.mysql.general.password,
            conf.mysql.driverClass)
}

// 設定情報の読み込み
def conf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/ap-archi-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/ap-archi-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.conf = conf

// SQLを発行するメソッド（ディレクトリ指定）
def execSqlDir(dir, url, user, password, driverClass) {
    new File(dir).listFiles().sort{a, b -> a.name <=> b.name}.each{ File f ->
        ant.sql(url: url,
            userid: user,
            password: password,
            driver: driverClass,
            classpath: buildscript.configurations.classpath.asPath,
            encoding: "UTF-8",
            onerror: "continue") {
                fileset(file: f)
            }
    }
}

// SQLを発行するメソッド（ファイル指定）
def execSql(file, url, user, password, driverClass) {
    ant.sql(
        driver: driverClass,
        url: url,
        userid: user,
        password: password,
        classpath: buildscript.configurations.classpath.asPath,
        encoding: "UTF-8",
        onerror: "continue") {
            fileset(file: file)
        }
}

// タスクをグループ化する
[setupMySQL]*.group = "setup-init-data"