import groovy.io.FileType

wrapper {
    gradleVersion = "6.2"
}

configurations {
    jaxws
}

dependencies {
    jaxws "com.sun.xml.ws:jaxws-tools:2.1.4"
}

// プラグイン読み込み
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "jacoco"

buildscript {
    repositories {
        jcenter()
    }
}

// リポジトリ設定
repositories {
    jcenter()
}

// 文字コード設定
def defaultEncoding = "UTF-8"
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

// 依存関係設定
dependencies {
    compile "javax:javaee-api:7.0"
    runtime "mysql:mysql-connector-java:5.1.47"
    testCompile "junit:junit:4.12"
}

// Javaプラグイン設定
sourceCompatibility = 1.8
targetCompatibility = 1.8

// ソースフォルダの設定
sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "src/main/proxy"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
    test {
        java {
            srcDir "src/test/java"
        }
        resources {
            srcDir "src/test/resources"
        }
    }
}

// Eclipseプラグイン設定
eclipse {
    classpath {
        defaultOutputDir = file("bin")
    }
}

// 設定情報の読み込み
def conf = {
    def slurper = new ConfigSlurper()
    slurper.binding = project.properties
    def confLocation = System.properties["user.home"]
    def file = new File(confLocation + "/ap-archi-conf.gradle")
    if (!file.exists()) {
        file = new File("$projectDir/ap-archi-conf.gradle")
        if (!file.exists()) return null
    }
    return new ConfigSlurper().parse(file.toURL())
}()

// 設定情報を拡張プロパティにセット
ext.conf = conf

// WSDLファイルにエンドポイントを埋め込む
def replaceWsdl(wsdlFile, warName, serviceName) {
    File tmpFile = new File(wsdlFile.getParent() + "/tmp.wsdl")
    tmpFile.withWriter { writer ->
        wsdlFile.newReader().eachLine { line ->
            line = line.replaceAll("REPLACE_WITH_ACTUAL_URL",
            "http://" + conf.glassfish.hostName + ":" +
            conf.glassfish.httpPort + "/" +
            warName.replaceAll(/\.war/, "") + "/" + serviceName)
            writer.println(line)
        }
    }
    wsdlFile.delete()
    tmpFile.renameTo(wsdlFile.path)
}

// WSIMPORT
def wsimport(wsdlFile, proxyDir) {
    exec {
        executable conf.wsimport
        args "-d", proxyDir
        args "-keep"
        args wsdlFile
    }
}

task generateProxy doLast {
    def proxyDir = new File("$projectDir/src/main/proxy")
    proxyDir.deleteDir(); proxyDir.mkdir()
    def wsdlDir = new File("$projectDir/wsdl")
    new File(wsdlDir.path).eachFileMatch(FileType.FILES, ~/[A-Za-z]+.wsdl/) {
        // プロキシコードを生成する
        wsimport(it, proxyDir)
    }
}

// タスクをグループ化する
[generateProxy]*.group = "jaxws"